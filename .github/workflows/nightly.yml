name: Nightly - Comprehensive Testing

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  comprehensive-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    strategy:
      matrix:
        scenario: [
          "full-bootstrap",
          "security-validation", 
          "performance-test",
          "multi-tenant-test",
          "observability-test"
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h
        
    - name: Install prerequisites
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install kind
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/
        
        # Install helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Install additional tools
        sudo apt-get update && sudo apt-get install -y jq curl apache2-utils
        
        # Install hey for load testing
        wget -q https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
        chmod +x hey_linux_amd64
        sudo mv hey_linux_amd64 /usr/local/bin/hey
        
    - name: Bootstrap platform
      run: |
        echo "🚀 Bootstrapping platform for ${{ matrix.scenario }}..."
        chmod +x scripts/bootstrap.sh
        timeout 3600 ./scripts/bootstrap.sh || exit 1
        
    - name: Wait for platform readiness
      run: |
        echo "⏳ Waiting for platform to be fully ready..."
        kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=1200s
        
    - name: Run test scenario - ${{ matrix.scenario }}
      run: |
        case "${{ matrix.scenario }}" in
          "full-bootstrap")
            echo "🧪 Testing full bootstrap functionality..."
            chmod +x scripts/demo.sh
            ./scripts/demo.sh --demo security
            ./scripts/demo.sh --demo multitenancy
            ;;
            
          "security-validation")
            echo "🔐 Running comprehensive security tests..."
            
            # Test JWT validation
            kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80 &
            PF_PID=$!
            sleep 10
            
            # Test invalid JWT
            curl -s -w "%{http_code}" -o /dev/null \
              -H "Authorization: Bearer invalid-token" \
              http://localhost:8080/v1/models/sklearn-iris:predict \
              -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' | grep -q "401\|403" || exit 1
              
            # Test without JWT
            curl -s -w "%{http_code}" -o /dev/null \
              http://localhost:8080/v1/models/sklearn-iris:predict \
              -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' | grep -q "401\|403" || exit 1
              
            kill $PF_PID
            echo "✅ Security validation passed"
            ;;
            
          "performance-test")
            echo "⚡ Running performance tests..."
            
            TOKENS=$(./scripts/get-jwt-tokens.sh)
            TOKEN_A=$(echo "$TOKENS" | jq -r '.tokens["tenant-a"]')
            
            kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80 &
            PF_PID=$!
            sleep 10
            
            # Load test
            hey -n 500 -c 50 -m POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN_A" \
              -H "x-tenant: tenant-a" \
              -H "x-ai-eg-model: sklearn-iris" \
              -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' \
              http://localhost:8080/v1/models/sklearn-iris:predict
              
            # Check auto-scaling
            kubectl get pods -n tenant-a -l serving.kserve.io/inferenceservice=sklearn-iris
            
            kill $PF_PID
            echo "✅ Performance test completed"
            ;;
            
          "multi-tenant-test")
            echo "🏢 Testing multi-tenant isolation..."
            
            TOKENS=$(./scripts/get-jwt-tokens.sh)
            TOKEN_A=$(echo "$TOKENS" | jq -r '.tokens["tenant-a"]')
            TOKEN_C=$(echo "$TOKENS" | jq -r '.tokens["tenant-c"]')
            
            kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80 &
            PF_PID=$!
            sleep 10
            
            # Test proper access
            curl -s -f -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN_A" \
              -H "x-tenant: tenant-a" \
              -H "x-ai-eg-model: sklearn-iris" \
              http://localhost:8080/v1/models/sklearn-iris:predict \
              -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' | jq .
              
            # Test cross-tenant access (should fail)
            if curl -s -f -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN_A" \
              -H "x-tenant: tenant-c" \
              -H "x-ai-eg-model: pytorch-resnet" \
              http://localhost:8080/v1/models/pytorch-resnet:predict \
              -d '{"instances": [[[0.1, 0.2, 0.3]]]}' 2>/dev/null; then
              echo "❌ Multi-tenant isolation failed"
              exit 1
            fi
            
            kill $PF_PID
            echo "✅ Multi-tenant isolation verified"
            ;;
            
          "observability-test")
            echo "📊 Testing observability stack..."
            
            # Test Prometheus
            kubectl port-forward -n monitoring svc/prometheus-kube-prometheus-prometheus 9090:9090 &
            PF_PID=$!
            sleep 10
            
            curl -s "http://localhost:9090/api/v1/query?query=up" | jq '.data.result | length' || exit 1
            
            kill $PF_PID
            
            # Test Grafana
            kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80 &
            PF_PID=$!
            sleep 10
            
            curl -s http://localhost:3000/api/health | jq '.database' | grep -q "ok" || exit 1
            
            kill $PF_PID
            echo "✅ Observability stack verified"
            ;;
        esac
        
    - name: Generate test report
      if: always()
      run: |
        echo "📋 Generating test report for ${{ matrix.scenario }}..."
        
        mkdir -p test-results
        echo "# Nightly Test Report - ${{ matrix.scenario }}" > test-results/nightly-${{ matrix.scenario }}.md
        echo "Date: $(date)" >> test-results/nightly-${{ matrix.scenario }}.md
        echo "" >> test-results/nightly-${{ matrix.scenario }}.md
        
        echo "## Platform Status" >> test-results/nightly-${{ matrix.scenario }}.md
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        kubectl get pods --all-namespaces >> test-results/nightly-${{ matrix.scenario }}.md
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        
        echo "## Resource Usage" >> test-results/nightly-${{ matrix.scenario }}.md
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        kubectl top nodes >> test-results/nightly-${{ matrix.scenario }}.md 2>/dev/null || echo "Metrics not available"
        kubectl top pods --all-namespaces >> test-results/nightly-${{ matrix.scenario }}.md 2>/dev/null || echo "Pod metrics not available"
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        
        echo "## Events" >> test-results/nightly-${{ matrix.scenario }}.md
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -20 >> test-results/nightly-${{ matrix.scenario }}.md
        echo "\`\`\`" >> test-results/nightly-${{ matrix.scenario }}.md
        
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        chmod +x scripts/cleanup.sh
        ./scripts/cleanup.sh || true
        kind delete clusters --all || true
        docker system prune -f
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-results-${{ matrix.scenario }}
        path: test-results/
        retention-days: 30

  nightly-summary:
    needs: comprehensive-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: nightly-test-results-*
        merge-multiple: true
        path: ./results
        
    - name: Generate summary
      run: |
        echo "# 🌙 Nightly Test Summary" > nightly-summary.md
        echo "Date: $(date)" >> nightly-summary.md
        echo "" >> nightly-summary.md
        
        echo "## Test Results" >> nightly-summary.md
        for scenario in full-bootstrap security-validation performance-test multi-tenant-test observability-test; do
          echo "### $scenario" >> nightly-summary.md
          if [ -f "results/nightly-$scenario.md" ]; then
            echo "✅ **PASSED**" >> nightly-summary.md
          else
            echo "❌ **FAILED**" >> nightly-summary.md
          fi
          echo "" >> nightly-summary.md
        done
        
        cat nightly-summary.md
        
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: nightly-summary
        path: nightly-summary.md
        retention-days: 90