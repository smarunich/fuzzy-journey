name: Main CI - Bootstrap & Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  bootstrap-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h
        
    - name: Install prerequisites
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install kind
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/
        
        # Install helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Install jq
        sudo apt-get update && sudo apt-get install -y jq
        
    - name: Run bootstrap.sh
      run: |
        echo "🚀 Running bootstrap.sh on Ubuntu with sufficient resources..."
        chmod +x scripts/bootstrap.sh
        
        # Run bootstrap with timeout
        timeout 3600 ./scripts/bootstrap.sh || exit 1
        
        echo "✅ Bootstrap completed successfully"
        
    - name: Verify platform readiness
      run: |
        echo "⏳ Verifying platform is ready..."
        
        # Wait for all pods to be ready
        kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=900s
        
        # Check key components
        kubectl get pods --all-namespaces
        kubectl get inferenceservice --all-namespaces
        kubectl get gateway,aigatewayroute -n envoy-gateway-system
        
        # Verify cluster health
        kubectl get pods --all-namespaces | grep -E "(Error|CrashLoopBackOff|Pending)" && exit 1 || echo "✅ All pods healthy"
        
    - name: Test basic functionality
      run: |
        echo "🧪 Testing basic platform functionality..."
        
        # Test JWT tokens
        chmod +x scripts/get-jwt-tokens.sh
        ./scripts/get-jwt-tokens.sh
        
        # Test model inference
        TOKENS=$(./scripts/get-jwt-tokens.sh)
        TOKEN_A=$(echo "$TOKENS" | jq -r '.tokens["tenant-a"]')
        
        kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80 &
        PF_PID=$!
        sleep 10
        
        # Test sklearn-iris prediction
        curl -s -f -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN_A" \
          -H "x-tenant: tenant-a" \
          -H "x-ai-eg-model: sklearn-iris" \
          http://localhost:8080/v1/models/sklearn-iris:predict \
          -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' | jq .
          
        kill $PF_PID
        
        echo "✅ Basic functionality tests passed"
        
    - name: Generate test report
      if: always()
      run: |
        echo "📋 Generating test report..."
        
        mkdir -p test-results
        echo "# Bootstrap Test Report" > test-results/bootstrap-report.md
        echo "## Platform Status" >> test-results/bootstrap-report.md
        echo "\`\`\`" >> test-results/bootstrap-report.md
        kubectl get pods --all-namespaces >> test-results/bootstrap-report.md
        echo "\`\`\`" >> test-results/bootstrap-report.md
        
        echo "## Resource Usage" >> test-results/bootstrap-report.md
        echo "\`\`\`" >> test-results/bootstrap-report.md
        kubectl top nodes >> test-results/bootstrap-report.md 2>/dev/null || echo "Metrics not available"
        echo "\`\`\`" >> test-results/bootstrap-report.md
        
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        chmod +x scripts/cleanup.sh
        ./scripts/cleanup.sh || true
        kind delete clusters --all || true
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bootstrap-test-results
        path: test-results/
        retention-days: 7

  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: bootstrap-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build images (no push)
      run: |
        echo "🏗️ Building Docker images..."
        chmod +x scripts/build-and-push-images.sh
        
        # Modify script to build-only (no push)
        export SKIP_PUSH=true
        ./scripts/build-and-push-images.sh
        
        echo "✅ Images built successfully"
        
    - name: Verify images
      run: |
        echo "🔍 Verifying built images..."
        docker images | grep -E "(management|jwt-server)" || echo "No images found with expected names"
        
        # Test image can start
        if docker images | grep -q "management"; then
          echo "Testing management image..."
          docker run --rm $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep management | head -1) --help || echo "Management image test completed"
        fi
        
        echo "✅ Image verification completed"