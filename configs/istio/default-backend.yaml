apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-backend
  namespace: default
  labels:
    app: default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-backend
  template:
    metadata:
      labels:
        app: default-backend
    spec:
      containers:
      - name: default-backend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: nginx-config
        configMap:
          name: default-backend-config
      - name: html-content
        configMap:
          name: default-backend-html
---
apiVersion: v1
kind: Service
metadata:
  name: default-backend
  namespace: default
  labels:
    app: default-backend
spec:
  selector:
    app: default-backend
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-backend-config
  namespace: default
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-backend-html
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Inference-in-a-Box - Default Backend</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; }
            .info { background: #e3f2fd; padding: 20px; border-radius: 4px; margin: 20px 0; }
            .endpoints { background: #f3e5f5; padding: 20px; border-radius: 4px; margin: 20px 0; }
            code { background: #f0f0f0; padding: 2px 4px; border-radius: 2px; }
            .footer { text-align: center; margin-top: 40px; color: #666; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Inference-in-a-Box</h1>
            <h2>Default Backend</h2>
            
            <div class="info">
                <h3>‚ÑπÔ∏è Information</h3>
                <p>You've reached the default backend service. This means your request didn't match any specific routes configured in the AI Gateway or Istio Gateway.</p>
            </div>
            
            <div class="endpoints">
                <h3>üéØ Available AI Model Endpoints</h3>
                <p>To access AI models, use the following endpoints with proper JWT authentication:</p>
                <ul>
                    <li><code>POST /v1/models/sklearn-iris:predict</code> - Iris classification model (Tenant A)</li>
                    <li><code>POST /v1/models/pytorch-resnet:predict</code> - ResNet image classification (Tenant C)</li>
                </ul>
                
                <h4>Example Usage:</h4>
                <pre><code>curl -H "Authorization: Bearer &lt;jwt-token&gt;" \
     http://localhost:8080/v1/models/sklearn-iris:predict \
     -d '{"instances": [[5.1, 3.5, 1.4, 0.2]]}'</code></pre>
            </div>
            
            <div class="info">
                <h3>üîë Authentication</h3>
                <p>All model endpoints require JWT authentication. Get demo tokens from:</p>
                <p><code>GET /tokens</code> endpoint on the JWT server</p>
            </div>
            
            <div class="footer">
                <p>Inference-in-a-Box - Enterprise AI/ML Platform Demo</p>
                <p>Powered by Envoy AI Gateway + Istio Service Mesh + KServe</p>
            </div>
        </div>
    </body>
    </html>