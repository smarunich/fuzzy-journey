apiVersion: apps/v1
kind: Deployment
metadata:
  name: jwt-server
  namespace: default
  labels:
    app: jwt-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jwt-server
  template:
    metadata:
      labels:
        app: jwt-server
    spec:
      containers:
      - name: jwt-server
        image: node:18-alpine
        ports:
        - containerPort: 8080
        env:
        - name: JWT_ISSUER
          value: "inference-in-a-box"
        - name: JWT_EXPIRY_HOURS
          value: "24"
        - name: NODE_ENV
          value: "production"
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /app/server.js << 'EOF'
          const http = require('http');
          const crypto = require('crypto');
          
          // Generate RSA key pair for JWT signing
          const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
            modulusLength: 2048,
            publicKeyEncoding: {
              type: 'spki',
              format: 'pem'
            },
            privateKeyEncoding: {
              type: 'pkcs8',
              format: 'pem'
            }
          });
          
          // Extract public key components for JWKS
          const publicKeyObj = crypto.createPublicKey(publicKey);
          const publicKeyJwk = publicKeyObj.export({ format: 'jwk' });
          
          // Generate JWKS with proper RSA public key
          const jwks = {
            "keys": [
              {
                "kty": "RSA",
                "n": publicKeyJwk.n,
                "e": publicKeyJwk.e,
                "alg": "RS256",
                "use": "sig",
                "kid": "jwt-server-key-1"
              }
            ]
          };
          
          // Function to generate JWT tokens
          function generateJWT(payload) {
            const header = {
              "alg": "RS256",
              "typ": "JWT",
              "kid": "jwt-server-key-1"
            };
            
            const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
            const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');
            
            const signature = crypto.sign('RSA-SHA256', Buffer.from(encodedHeader + '.' + encodedPayload), privateKey);
            const encodedSignature = signature.toString('base64url');
            
            return encodedHeader + '.' + encodedPayload + '.' + encodedSignature;
          }
          
          // Get configuration from environment variables
          const JWT_ISSUER = process.env.JWT_ISSUER || "inference-in-a-box";
          const JWT_EXPIRY_HOURS = parseInt(process.env.JWT_EXPIRY_HOURS || "24");
          
          // Generate tokens for each tenant
          const now = Math.floor(Date.now() / 1000);
          const exp = now + (JWT_EXPIRY_HOURS * 60 * 60);
          
          const tokens = {
            "tenant-a": generateJWT({
              "sub": "user-a",
              "name": "Tenant A User",
              "tenant": "tenant-a",
              "iss": JWT_ISSUER,
              "aud": "tenant-a",
              "iat": now,
              "exp": exp
            }),
            "tenant-b": generateJWT({
              "sub": "user-b",
              "name": "Tenant B User",
              "tenant": "tenant-b",
              "iss": JWT_ISSUER,
              "aud": "tenant-b",
              "iat": now,
              "exp": exp
            }),
            "tenant-c": generateJWT({
              "sub": "user-c",
              "name": "Tenant C User",
              "tenant": "tenant-c",
              "iss": JWT_ISSUER,
              "aud": "tenant-c",
              "iat": now,
              "exp": exp
            })
          };
          
          const server = http.createServer((req, res) => {
            res.setHeader('Content-Type', 'application/json');
            res.setHeader('Access-Control-Allow-Origin', '*');
            
            console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
            
            if (req.url === '/.well-known/jwks.json') {
              res.writeHead(200);
              res.end(JSON.stringify(jwks, null, 2));
            } else if (req.url === '/tokens') {
              res.writeHead(200);
              res.end(JSON.stringify(tokens, null, 2));
            } else if (req.url === '/health') {
              res.writeHead(200);
              res.end(JSON.stringify({status: 'healthy'}));
            } else {
              res.writeHead(404);
              res.end(JSON.stringify({error: 'Not found'}));
            }
          });
          
          server.listen(8080, '0.0.0.0', () => {
            console.log('JWT Server started on port 8080');
            console.log('Available endpoints:');
            console.log('  /.well-known/jwks.json - JWKS endpoint');
            console.log('  /tokens - Demo JWT tokens');
            console.log('  /health - Health check');
          });
          EOF
          
          cd /app && node server.js
        workingDir: /app
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /.well-known/jwks.json
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: jwt-server
  namespace: default
  labels:
    app: jwt-server
spec:
  selector:
    app: jwt-server
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP